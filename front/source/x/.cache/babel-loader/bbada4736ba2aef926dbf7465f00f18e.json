{"ast":null,"code":"import axios from 'axios';\nimport * as loadingErrorActions from '../actions/index';\nimport * as actionTypes from './actionTypes';\nimport * as api from '../actions/api';\n\nconst getAllUsers = users => {\n  return {\n    type: actionTypes.GET_ALL_USERS,\n    users: users\n  };\n};\n\nexport const fetchAllUsers = token => {\n  return dispatch => {\n    dispatch(loadingErrorActions.startRequest());\n    const auth = {\n      headers: {\n        Authorization: token\n      }\n    };\n    axios.get(api.URL_GET_ALL_USERS, auth).then(response => {\n      dispatch(getAllUsers(response.data.data));\n      dispatch(loadingErrorActions.endRequest());\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst createNewUser = (username, id) => {\n  return {\n    type: actionTypes.CREATE_USER,\n    username: username,\n    id: id\n  };\n};\n\nexport const createUser = (username, password, token) => {\n  return dispatch => {\n    const newUser = {\n      username: username,\n      password: password\n    };\n    const auth = {\n      headers: {\n        Authorization: token\n      }\n    };\n    axios.post(api.URL_USERS_ADD, newUser, auth).then(res => {\n      dispatch(createNewUser(username, res.data.userID));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst onDeleteUser = id => {\n  return {\n    type: actionTypes.DELETE_USER,\n    id: id\n  };\n};\n\nexport const deleteUser = (id, token) => {\n  return dispatch => {\n    const auth = {\n      headers: {\n        Authorization: token\n      }\n    };\n    axios.delete(api.URL_USERS_DELETE + id, auth).then(res => {\n      dispatch(onDeleteUser(id));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst onUpdateUser = user => {\n  return {\n    type: actionTypes.EDIT_USER,\n    user: user\n  };\n};\n\nexport const editUser = (user, token) => {\n  return dispatch => {\n    const auth = {\n      headers: {\n        Authorization: token\n      }\n    };\n    const updatedUser = {\n      username: user.username,\n      password: user.password\n    };\n    axios.put(api.URL_USERS_EDIT + user.id, updatedUser, auth).then(res => {\n      dispatch(onUpdateUser(user));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst onGetUserPlacesByAdmin = userPlaces => {\n  return {\n    type: actionTypes.GET_USER_PLACES_ADMIN,\n    userPlaces: userPlaces\n  };\n};\n\nexport const getUserPlacesByAdmin = (id, token) => {\n  return dispatch => {\n    dispatch(loadingErrorActions.startRequest());\n    const auth = {\n      headers: {\n        Authorization: token\n      }\n    };\n    axios.get(api.URL_USERS_PLACES_ADMIN + id, auth).then(res => {\n      dispatch(onGetUserPlacesByAdmin(res.data.data));\n      dispatch(loadingErrorActions.endRequest());\n    }).catch(err => {\n      console.log(err);\n      dispatch(loadingErrorActions.errorRequest(err.toString()));\n    });\n  };\n};\n\nconst onAddPlaceToUserHandler = place => {\n  return {\n    type: actionTypes.ADD_PLACE_TO_USER,\n    place: place\n  };\n};\n\nexport const addPlaceToUserHandler = (user, place, token) => {\n  return dispatch => {\n    const auth = {\n      headers: {\n        Authorization: token\n      }\n    };\n    const userToOp = {\n      user_id: user.id\n    };\n    axios.post(api.URL_ADD_PLACE_TO_USER + place.ID, userToOp, auth).then(res => {\n      dispatch(onAddPlaceToUserHandler(place));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; //TODO\n\nconst onRemovePlaceToUserHandler = id => {\n  return {\n    type: actionTypes.REMOVE_PLACE_FROM_USER,\n    id: id\n  };\n};\n\nexport const removePlaceToUserHandler = (user, place, token) => {\n  return dispatch => {\n    const authAndData = {\n      headers: {\n        Authorization: token\n      },\n      data: {\n        user_id: user.id\n      }\n    };\n    axios.delete(api.URL_REMOVE_PLACE_FROM_USER + place.ID, authAndData).then(res => {\n      console.log(res.data.data);\n      dispatch(onRemovePlaceToUserHandler(place.ID));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["/app/src/store/actions/users.js"],"names":["axios","loadingErrorActions","actionTypes","api","getAllUsers","users","type","GET_ALL_USERS","fetchAllUsers","token","dispatch","startRequest","auth","headers","Authorization","get","URL_GET_ALL_USERS","then","response","data","endRequest","catch","err","console","log","createNewUser","username","id","CREATE_USER","createUser","password","newUser","post","URL_USERS_ADD","res","userID","onDeleteUser","DELETE_USER","deleteUser","delete","URL_USERS_DELETE","onUpdateUser","user","EDIT_USER","editUser","updatedUser","put","URL_USERS_EDIT","onGetUserPlacesByAdmin","userPlaces","GET_USER_PLACES_ADMIN","getUserPlacesByAdmin","URL_USERS_PLACES_ADMIN","errorRequest","toString","onAddPlaceToUserHandler","place","ADD_PLACE_TO_USER","addPlaceToUserHandler","userToOp","user_id","URL_ADD_PLACE_TO_USER","ID","onRemovePlaceToUserHandler","REMOVE_PLACE_FROM_USER","removePlaceToUserHandler","authAndData","URL_REMOVE_PLACE_FROM_USER"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport * as loadingErrorActions from '../actions/index';\nimport * as actionTypes from './actionTypes';\nimport * as api from '../actions/api';\n\nconst getAllUsers = (users) => {\n    return {\n        type: actionTypes.GET_ALL_USERS,\n        users: users,\n    }\n}\n\nexport const fetchAllUsers = (token) => {\n    return (dispatch) => {\n        dispatch(loadingErrorActions.startRequest());\n        const auth = {\n            headers: {\n                Authorization: token\n            }\n        };\n        axios.get(api.URL_GET_ALL_USERS, auth).then(response => {\n            dispatch(getAllUsers(response.data.data));\n            dispatch(loadingErrorActions.endRequest());\n        }).catch(err => {\n            console.log(err)\n        });\n    }\n}\n\nconst createNewUser = (username, id) => {\n    return {\n        type: actionTypes.CREATE_USER,\n        username: username,\n        id: id,\n    }\n}\n\nexport const createUser = (username, password, token) => {\n    return (dispatch) => {\n        const newUser = {\n            username: username,\n            password: password\n        };\n\n        const auth = {\n            headers: {\n                Authorization: token,\n            }\n        };\n\n        axios.post(api.URL_USERS_ADD, newUser, auth).then(res => {\n            dispatch(createNewUser(username, res.data.userID));\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n}\n\nconst onDeleteUser = (id) => {\n    return {\n        type: actionTypes.DELETE_USER,\n        id: id,\n    }\n}\n\nexport const deleteUser = (id, token) => {\n    return (dispatch) => {\n        const auth = {\n            headers: {\n                Authorization: token,\n            }\n        };\n\n        axios.delete(api.URL_USERS_DELETE + id, auth).then(res => {\n            dispatch(onDeleteUser(id));\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n}\n\nconst onUpdateUser = (user) => {\n    return {\n        type: actionTypes.EDIT_USER,\n        user: user,\n    }\n}\n\nexport const editUser = (user, token) => {\n    return (dispatch) => {\n        const auth = {\n            headers: {\n                Authorization: token,\n            }\n        };\n        const updatedUser = {\n            username: user.username,\n            password: user.password\n        };\n        axios.put(api.URL_USERS_EDIT + user.id, updatedUser, auth).then(res => {\n            dispatch(onUpdateUser(user));\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n}\n\nconst onGetUserPlacesByAdmin = (userPlaces) => {\n    return {\n        type: actionTypes.GET_USER_PLACES_ADMIN,\n        userPlaces: userPlaces,\n    }\n}\n\nexport const getUserPlacesByAdmin = (id, token) => {\n    return (dispatch) => {\n        dispatch(loadingErrorActions.startRequest());\n        const auth = {\n            headers: {\n                Authorization: token,\n            }\n        };\n\n        axios.get(api.URL_USERS_PLACES_ADMIN + id, auth).then(res => {\n            dispatch(onGetUserPlacesByAdmin(res.data.data));\n            dispatch(loadingErrorActions.endRequest());\n        }).catch(err => {\n            console.log(err);\n            dispatch(loadingErrorActions.errorRequest(err.toString()));\n        });\n    }\n}\n\nconst onAddPlaceToUserHandler = (place) => {\n    return {\n        type: actionTypes.ADD_PLACE_TO_USER,\n        place: place,\n    }\n}\n\nexport const addPlaceToUserHandler = (user, place, token) => {\n    return (dispatch) => {\n        const auth = {\n            headers: {\n                Authorization: token,\n            }\n        };\n        const userToOp = {\n            user_id: user.id,\n        }\n\n        axios.post(api.URL_ADD_PLACE_TO_USER + place.ID, userToOp, auth).then(res => {\n            dispatch(onAddPlaceToUserHandler(place));\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n}\n\n//TODO\nconst onRemovePlaceToUserHandler = (id) => {\n    return {\n        type: actionTypes.REMOVE_PLACE_FROM_USER,\n        id: id,\n    }\n}\n\nexport const removePlaceToUserHandler = (user, place, token) => {\n    return (dispatch) => {\n        const authAndData = {\n            headers: {\n                Authorization: token,\n            },\n            data: {\n                user_id: user.id,\n            }\n        };\n\n        axios.delete(api.URL_REMOVE_PLACE_FROM_USER + place.ID, authAndData).then(res => {\n            console.log(res.data.data)\n            dispatch(onRemovePlaceToUserHandler(place.ID));\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}