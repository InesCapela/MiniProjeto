{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nimport * as loadingErrorActions from '../actions/index';\nimport * as api from '../actions/api';\nexport const authSuccess = (token, username, isAdmin) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username: username,\n    isAdmin: isAdmin\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('expirationTime');\n  localStorage.removeItem('isAdmin');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const auth = (username, password) => {\n  return dispatch => {\n    const authData = {\n      username: username,\n      password: password\n    };\n    axios.post(api.URL_LOGIN, authData).then(res => {\n      dispatch(loadingErrorActions.startRequest());\n      const expirationDate = new Date(Date.parse(res.data.expirationTime)); // 60000 -> 1min to refresh token before it expires\n\n      const expirationTime = Date.parse(res.data.expirationTime) - new Date().getTime() - 60000;\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('expirationTime', expirationTime);\n      localStorage.setItem('username', res.data.username);\n      localStorage.setItem('isAdmin', res.data.isAdmin);\n      dispatch(checkAuthTimeout(expirationTime));\n      dispatch(authSuccess(res.data.token, res.data.username, res.data.isAdmin));\n      dispatch(loadingErrorActions.endRequest());\n    }).catch(err => {\n      dispatch(loadingErrorActions.errorRequest(err.toString()));\n    });\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      // not working -> after token expiration date the user are redirect to login page\n      // refreshToken();\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const username = localStorage.getItem('username');\n      const isAdmin = localStorage.getItem('isAdmin');\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        // 60000 -> 1min to refresh token before it expires\n        const expirationTime = expirationDate.getTime() - new Date().getTime() - 60000;\n        dispatch(authSuccess(token, username, isAdmin));\n        dispatch(checkAuthTimeout(expirationTime));\n      }\n    }\n  };\n};\n/* const refreshToken = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        const username = localStorage.getItem('username');\n\n        const auth = {\n            headers: {\n                username: username,\n                Authorization: token,\n            }\n        };\n\n        axios.put('http://0.0.0.0:8081/api/v1/auth/refresh_token', null, auth).then(res => {\n\n            const expirationDate = new Date(Date.parse(res.data.expirationTime));\n            // 60000 -> 1min to refresh token before it expires\n            const expirationTime = Date.parse(res.data.expirationTime) - new Date().getTime() - 60000;\n\n            localStorage.setItem('token', res.data.token);\n            localStorage.setItem('expirationDate', expirationDate);\n            localStorage.setItem('expirationTime', expirationTime);\n            localStorage.setItem('isAdmin', res.data.isAdmin);\n\n            dispatch(authSuccess(res.data.token, res.data.isAdmin));\n            dispatch(checkAuthTimeout(expirationTime));\n        }).catch(err => {\n            dispatch(logout());\n        });\n    }\n} */","map":{"version":3,"sources":["/app/src/store/actions/auth.js"],"names":["axios","actionTypes","loadingErrorActions","api","authSuccess","token","username","isAdmin","type","AUTH_SUCCESS","logout","localStorage","removeItem","AUTH_LOGOUT","auth","password","dispatch","authData","post","URL_LOGIN","then","res","startRequest","expirationDate","Date","parse","data","expirationTime","getTime","setItem","checkAuthTimeout","endRequest","catch","err","errorRequest","toString","setTimeout","authCheckState","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nimport * as loadingErrorActions from '../actions/index';\nimport * as api from '../actions/api';\n\nexport const authSuccess = (token, username, isAdmin) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token,\n        username: username,\n        isAdmin: isAdmin,\n    };\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('expirationTime');\n    localStorage.removeItem('isAdmin');\n    return {\n        type: actionTypes.AUTH_LOGOUT,\n    };\n}\n\nexport const auth = (username, password) => {\n    return dispatch => {\n        const authData = {\n            username: username,\n            password: password\n        };\n\n        axios.post(api.URL_LOGIN, authData).then(res => {\n            dispatch(loadingErrorActions.startRequest());\n\n            const expirationDate = new Date(Date.parse(res.data.expirationTime));\n            // 60000 -> 1min to refresh token before it expires\n            const expirationTime = Date.parse(res.data.expirationTime) - new Date().getTime() - 60000;\n\n            localStorage.setItem('token', res.data.token);\n            localStorage.setItem('expirationDate', expirationDate);\n            localStorage.setItem('expirationTime', expirationTime);\n            localStorage.setItem('username', res.data.username);\n            localStorage.setItem('isAdmin', res.data.isAdmin);\n\n            dispatch(checkAuthTimeout(expirationTime));\n            dispatch(authSuccess(res.data.token, res.data.username, res.data.isAdmin));\n            dispatch(loadingErrorActions.endRequest());\n        }).catch(err => {\n            dispatch(loadingErrorActions.errorRequest(err.toString()));\n        });\n    }\n}\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            // not working -> after token expiration date the user are redirect to login page\n            // refreshToken();\n            dispatch(logout());\n        }, expirationTime);\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const username = localStorage.getItem('username');\n            const isAdmin = localStorage.getItem('isAdmin');\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()) {\n                dispatch(logout());\n            } else {\n                // 60000 -> 1min to refresh token before it expires\n                const expirationTime = expirationDate.getTime() - new Date().getTime() - 60000;\n                dispatch(authSuccess(token, username, isAdmin));\n                dispatch(checkAuthTimeout(expirationTime));\n            }\n        }\n    };\n}\n\n/* const refreshToken = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        const username = localStorage.getItem('username');\n\n        const auth = {\n            headers: {\n                username: username,\n                Authorization: token,\n            }\n        };\n\n        axios.put('http://0.0.0.0:8081/api/v1/auth/refresh_token', null, auth).then(res => {\n\n            const expirationDate = new Date(Date.parse(res.data.expirationTime));\n            // 60000 -> 1min to refresh token before it expires\n            const expirationTime = Date.parse(res.data.expirationTime) - new Date().getTime() - 60000;\n\n            localStorage.setItem('token', res.data.token);\n            localStorage.setItem('expirationDate', expirationDate);\n            localStorage.setItem('expirationTime', expirationTime);\n            localStorage.setItem('isAdmin', res.data.isAdmin);\n\n            dispatch(authSuccess(res.data.token, res.data.isAdmin));\n            dispatch(checkAuthTimeout(expirationTime));\n        }).catch(err => {\n            dispatch(logout());\n        });\n    }\n} */"]},"metadata":{},"sourceType":"module"}