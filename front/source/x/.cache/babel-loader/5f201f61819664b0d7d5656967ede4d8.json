{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar transports = require('./transports');\n\nvar Emitter = require('component-emitter');\n\nvar debug = require('debug')('engine.io-client:socket');\n\nvar index = require('indexof');\n\nvar parser = require('engine.io-parser');\n\nvar parseuri = require('parseuri');\n\nvar parsejson = require('parsejson');\n\nvar parseqs = require('parseqs');\n/**\n * Module exports.\n */\n\n\nmodule.exports = Socket;\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop() {}\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\n\nfunction Socket(uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n  opts = opts || {};\n\n  if (uri && 'object' == typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure : global.location && 'https:' == location.protocol;\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname || (global.location ? location.hostname : 'localhost');\n  this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);\n  this.query = opts.query || {};\n  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  } // SSL options for Node.js client\n\n\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized; // other options for Node.js client\n\n  var freeGlobal = typeof global == 'object' && global;\n\n  if (freeGlobal.global === freeGlobal) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n  }\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = require('./transport');\nSocket.transports = require('./transports');\nSocket.parser = require('engine.io-parser');\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query); // append engine.io protocol identifier\n\n  query.EIO = parser.protocol; // transport name\n\n  query.transport = name; // session id if we already have one\n\n  if (this.id) query.sid = this.id;\n  var transport = new transports[name]({\n    agent: this.agent,\n    hostname: this.hostname,\n    port: this.port,\n    secure: this.secure,\n    path: this.path,\n    query: query,\n    forceJSONP: this.forceJSONP,\n    jsonp: this.jsonp,\n    forceBase64: this.forceBase64,\n    enablesXDR: this.enablesXDR,\n    timestampRequests: this.timestampRequests,\n    timestampParam: this.timestampParam,\n    policyPort: this.policyPort,\n    socket: this,\n    pfx: this.pfx,\n    key: this.key,\n    passphrase: this.passphrase,\n    cert: this.cert,\n    ca: this.ca,\n    ciphers: this.ciphers,\n    rejectUnauthorized: this.rejectUnauthorized,\n    perMessageDeflate: this.perMessageDeflate,\n    extraHeaders: this.extraHeaders\n  });\n  return transport;\n};\n\nfunction clone(obj) {\n  var o = {};\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n\n  return o;\n}\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\n\n\nSocket.prototype.open = function () {\n  var transport;\n\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n\n  this.readyState = 'opening'; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\n\nSocket.prototype.setTransport = function (transport) {\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  } // set up transport\n\n\n  this.transport = transport; // set up transport listeners\n\n  transport.on('drain', function () {\n    self.onDrain();\n  }).on('packet', function (packet) {\n    self.onPacket(packet);\n  }).on('error', function (e) {\n    self.onError(e);\n  }).on('close', function () {\n    self.onClose('transport close');\n  });\n};\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, {\n    probe: 1\n  }),\n      failed = false,\n      self = this;\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen() {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n\n    if (failed) return;\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{\n      type: 'ping',\n      data: 'probe'\n    }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n\n      if ('pong' == msg.type && 'probe' == msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' == transport.name;\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' == self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n          cleanup();\n          self.setTransport(transport);\n          transport.send([{\n            type: 'upgrade'\n          }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport() {\n    if (failed) return; // Any callback called by transport should be ignored since now\n\n    failed = true;\n    cleanup();\n    transport.close();\n    transport = null;\n  } //Handle any error that happens while probing\n\n\n  function onerror(err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n    freezeTransport();\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose() {\n    onerror(\"transport closed\");\n  } //When the socket is closed while we're probing\n\n\n  function onclose() {\n    onerror(\"socket closed\");\n  } //When the socket is upgraded while we're probing\n\n\n  function onupgrade(to) {\n    if (transport && to.name != transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  } //Remove all listeners on the transport and on self\n\n\n  function cleanup() {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n  transport.open();\n};\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;\n  this.emit('open');\n  this.flush(); // we check for `readyState` in case an `open`\n  // listener already closed the socket\n\n  if ('open' == this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n/**\n * Handles a packet.\n *\n * @api private\n */\n\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' == this.readyState || 'open' == this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n    this.emit('packet', packet); // Socket is live - any packet counts\n\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(parsejson(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen(); // In case open handler closes socket\n\n  if ('closed' == this.readyState) return;\n  this.setPing(); // Prolong liveness of socket on heartbeat\n\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' == self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || self.pingInterval + self.pingTimeout);\n};\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\n\nSocket.prototype.flush = function () {\n  if ('closed' != this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\n\nSocket.prototype.write = Socket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' == typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' == typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' == this.readyState || 'closed' == this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n/**\n * Closes the connection.\n *\n * @api private\n */\n\n\nSocket.prototype.close = function () {\n  if ('opening' == this.readyState || 'open' == this.readyState) {\n    this.readyState = 'closing';\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close() {\n    self.onClose('forced close');\n    debug('socket closing - telling transport to close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose() {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade() {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n/**\n * Called upon transport error\n *\n * @api private\n */\n\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this; // clear timers\n\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport\n\n    this.transport.removeAllListeners('close'); // ensure transport won't stay open\n\n    this.transport.close(); // ignore further transport communication\n\n    this.transport.removeAllListeners(); // set ready state\n\n    this.readyState = 'closed'; // clear session id\n\n    this.id = null; // emit close event\n\n    this.emit('close', reason, desc); // clean buffers after, so users can still\n    // grab the buffers on `close` event\n\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n\n  return filteredUpgrades;\n};","map":{"version":3,"sources":["/app/node_modules/engine.io-client/lib/socket.js"],"names":["transports","require","Emitter","debug","index","parser","parseuri","parsejson","parseqs","module","exports","Socket","noop","uri","opts","hostname","host","secure","protocol","port","query","global","location","agent","decode","upgrade","path","replace","forceJSONP","jsonp","forceBase64","enablesXDR","timestampParam","timestampRequests","readyState","writeBuffer","policyPort","rememberUpgrade","binaryType","onlyBinaryUpgrades","perMessageDeflate","threshold","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","undefined","freeGlobal","extraHeaders","Object","keys","length","open","priorWebsocketSuccess","prototype","Transport","createTransport","name","clone","EIO","transport","id","sid","socket","obj","o","i","hasOwnProperty","indexOf","self","setTimeout","emit","e","shift","setTransport","removeAllListeners","on","onDrain","packet","onPacket","onError","onClose","probe","failed","onTransportOpen","upgradeLosesBinary","supportsBinary","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","close","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","onOpen","l","upgrades","onHandshake","setPing","code","filterUpgrades","pingInterval","pingTimeout","onHeartbeat","timeout","clearTimeout","pingTimeoutTimer","pingIntervalTimer","ping","sendPacket","splice","prevBufferLen","writable","write","options","fn","compress","push","waitForUpgrade","cleanupAndClose","reason","desc","filteredUpgrades","j"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar transports = require('./transports');\nvar Emitter = require('component-emitter');\nvar debug = require('debug')('engine.io-client:socket');\nvar index = require('indexof');\nvar parser = require('engine.io-parser');\nvar parseuri = require('parseuri');\nvar parsejson = require('parsejson');\nvar parseqs = require('parseqs');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop(){}\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket(uri, opts){\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts = opts || {};\n\n  if (uri && 'object' == typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure :\n    (global.location && 'https:' == location.protocol);\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname ||\n    (global.location ? location.hostname : 'localhost');\n  this.port = opts.port || (global.location && location.port ?\n       location.port :\n       (this.secure ? 443 : 80));\n  this.query = opts.query || {};\n  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\n\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  }\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\n\n  // other options for Node.js client\n  var freeGlobal = typeof global == 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n  }\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = require('./transport');\nSocket.transports = require('./transports');\nSocket.parser = require('engine.io-parser');\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO = parser.protocol;\n\n  // transport name\n  query.transport = name;\n\n  // session id if we already have one\n  if (this.id) query.sid = this.id;\n\n  var transport = new transports[name]({\n    agent: this.agent,\n    hostname: this.hostname,\n    port: this.port,\n    secure: this.secure,\n    path: this.path,\n    query: query,\n    forceJSONP: this.forceJSONP,\n    jsonp: this.jsonp,\n    forceBase64: this.forceBase64,\n    enablesXDR: this.enablesXDR,\n    timestampRequests: this.timestampRequests,\n    timestampParam: this.timestampParam,\n    policyPort: this.policyPort,\n    socket: this,\n    pfx: this.pfx,\n    key: this.key,\n    passphrase: this.passphrase,\n    cert: this.cert,\n    ca: this.ca,\n    ciphers: this.ciphers,\n    rejectUnauthorized: this.rejectUnauthorized,\n    perMessageDeflate: this.perMessageDeflate,\n    extraHeaders: this.extraHeaders\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open = function () {\n  var transport;\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function() {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n  this.readyState = 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport = function(transport){\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport = transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function(){\n    self.onDrain();\n  })\n  .on('packet', function(packet){\n    self.onPacket(packet);\n  })\n  .on('error', function(e){\n    self.onError(e);\n  })\n  .on('close', function(){\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, { probe: 1 })\n    , failed = false\n    , self = this;\n\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen(){\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' == msg.type && 'probe' == msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' == transport.name;\n\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' == self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport() {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed = true;\n\n    cleanup();\n\n    transport.close();\n    transport = null;\n  }\n\n  //Handle any error that happens while probing\n  function onerror(err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n\n    freezeTransport();\n\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose(){\n    onerror(\"transport closed\");\n  }\n\n  //When the socket is closed while we're probing\n  function onclose(){\n    onerror(\"socket closed\");\n  }\n\n  //When the socket is upgraded while we're probing\n  function onupgrade(to){\n    if (transport && to.name != transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  }\n\n  //Remove all listeners on the transport and on self\n  function cleanup(){\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' == this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' == this.readyState || 'open' == this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(parsejson(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if  ('closed' == this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' == self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function(){\n    self.emit('ping');\n  });\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain = function() {\n  this.writeBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' != this.readyState && this.transport.writable &&\n    !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write =\nSocket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if('function' == typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' == typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' == this.readyState || 'closed' == this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close = function () {\n  if ('opening' == this.readyState || 'open' == this.readyState) {\n    this.readyState = 'closing';\n\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function() {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close() {\n    self.onClose('forced close');\n    debug('socket closing - telling transport to close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose() {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade() {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState = 'closed';\n\n    // clear session id\n    this.id = null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n\n    // clean buffers after, so users can still\n    // grab the buffers on `close` event\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n  for (var i = 0, j = upgrades.length; i<j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n"]},"metadata":{},"sourceType":"script"}