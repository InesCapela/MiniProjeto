{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar keys = require('./keys');\n\nvar hasBinary = require('has-binary');\n\nvar sliceBuffer = require('arraybuffer.slice');\n\nvar base64encoder = require('base64-arraybuffer');\n\nvar after = require('after');\n\nvar utf8 = require('utf8');\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\n\nvar isAndroid = navigator.userAgent.match(/Android/i);\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\n\nvar isPhantomJS = /PhantomJS/i.test(navigator.userAgent);\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\n\nvar dontSendBlobs = isAndroid || isPhantomJS;\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n  open: 0 // non-ws\n  ,\n  close: 1 // non-ws\n  ,\n  ping: 2,\n  pong: 3,\n  message: 4,\n  upgrade: 5,\n  noop: 6\n};\nvar packetslist = keys(packets);\n/**\n * Premade error packet.\n */\n\nvar err = {\n  type: 'error',\n  data: 'parser error'\n};\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = require('blob');\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if ('function' == typeof supportsBinary) {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if ('function' == typeof utf8encode) {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;\n\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob && data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  } // might be an object with { base64: true, data: dataAsBase64String }\n\n\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  } // Sending data as a utf-8 string\n\n\n  var encoded = packets[packet.type]; // data fragment is optional\n\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n/**\n * Encode packet helpers for binary types\n */\n\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n  resultBuffer[0] = packets[packet.type];\n\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i + 1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n\n  fr.onload = function () {\n    packet.data = fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n  return callback(blob);\n}\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\n\nexports.encodeBase64Packet = function (packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n\n  if (Blob && packet.data instanceof global.Blob) {\n    var fr = new FileReader();\n\n    fr.onload = function () {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n\n  message += global.btoa(b64data);\n  return callback(message);\n};\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  // String data\n  if (typeof data == 'string' || data === undefined) {\n    if (data.charAt(0) == 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      try {\n        data = utf8.decode(data);\n      } catch (e) {\n        return err;\n      }\n    }\n\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return {\n        type: packetslist[type],\n        data: data.substring(1)\n      };\n    } else {\n      return {\n        type: packetslist[type]\n      };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n\n  return {\n    type: packetslist[type],\n    data: rest\n  };\n};\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\n\nexports.decodeBase64Packet = function (msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n\n  if (!global.ArrayBuffer) {\n    return {\n      type: type,\n      data: {\n        base64: true,\n        data: msg.substr(1)\n      }\n    };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return {\n    type: type,\n    data: data\n  };\n};\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary == 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function (message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function (err, results) {\n    return callback(results.join(''));\n  });\n};\n/**\n * Async array map using after\n */\n\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function (i, el, cb) {\n    each(el, function (error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data != 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n\n  if (data == '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = '',\n      n,\n      msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (':' != chr) {\n      length += chr;\n    } else {\n      if ('' == length || length != (n = Number(length))) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      msg = data.substr(i + 1, n);\n\n      if (length != msg.length) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      if (msg.length) {\n        packet = exports.decodePacket(msg, binaryType, true);\n\n        if (err.type == packet.type && err.data == packet.data) {\n          // parser error in individual packet - ignoring payload\n          return callback(err, 0, 1);\n        }\n\n        var ret = callback(packet, i + n, l);\n        if (false === ret) return;\n      } // advance cursor\n\n\n      i += n;\n      length = '';\n    }\n  }\n\n  if (length != '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n};\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\n\nexports.encodePayloadAsArrayBuffer = function (packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function (data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function (err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function (acc, p) {\n      var len;\n\n      if (typeof p === 'string') {\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n    var resultArray = new Uint8Array(totalLength);\n    var bufferIndex = 0;\n    encodedPackets.forEach(function (p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n\n      if (isString) {\n        var view = new Uint8Array(p.length);\n\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n\n        ab = view.buffer;\n      }\n\n      if (isString) {\n        // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else {\n        // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n\n      resultArray[bufferIndex++] = 255;\n      var view = new Uint8Array(ab);\n\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n    return callback(resultArray.buffer);\n  });\n};\n/**\n * Encode as Blob\n */\n\n\nexports.encodePayloadAsBlob = function (packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function (encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function (err, results) {\n    return callback(new Blob(results));\n  });\n};\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n  var numberTooLong = false;\n\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1;; i++) {\n      if (tailArray[i] == 255) break;\n\n      if (msgLength.length > 310) {\n        numberTooLong = true;\n        break;\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    if (numberTooLong) return callback(err, 0, 1);\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function (buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};","map":{"version":3,"sources":["/app/node_modules/engine.io-parser/lib/browser.js"],"names":["keys","require","hasBinary","sliceBuffer","base64encoder","after","utf8","isAndroid","navigator","userAgent","match","isPhantomJS","test","dontSendBlobs","exports","protocol","packets","open","close","ping","pong","message","upgrade","noop","packetslist","err","type","data","Blob","encodePacket","packet","supportsBinary","utf8encode","callback","undefined","buffer","global","ArrayBuffer","encodeArrayBuffer","encodeBlob","base64","encodeBase64Object","encoded","encode","String","encodeBase64Packet","contentArray","Uint8Array","resultBuffer","byteLength","i","length","encodeBlobAsArrayBuffer","fr","FileReader","onload","result","readAsArrayBuffer","blob","b64","split","readAsDataURL","b64data","fromCharCode","apply","e","typed","basic","Array","btoa","decodePacket","binaryType","utf8decode","charAt","decodeBase64Packet","substr","decode","Number","substring","asArray","rest","msg","encodePayload","isBinary","encodePayloadAsBlob","encodePayloadAsArrayBuffer","setLengthHeader","encodeOne","doneCallback","map","results","join","ary","each","done","next","eachWithIndex","el","cb","error","decodePayload","decodePayloadAsBinary","n","l","chr","ret","encodedPackets","totalLength","reduce","acc","p","len","toString","resultArray","bufferIndex","forEach","isString","ab","view","charCodeAt","lenStr","parseInt","binaryIdentifier","size","lengthAry","bufferTail","buffers","numberTooLong","tailArray","msgLength","push","total"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar keys = require('./keys');\nvar hasBinary = require('has-binary');\nvar sliceBuffer = require('arraybuffer.slice');\nvar base64encoder = require('base64-arraybuffer');\nvar after = require('after');\nvar utf8 = require('utf8');\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = navigator.userAgent.match(/Android/i);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = require('blob');\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if ('function' == typeof supportsBinary) {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if ('function' == typeof utf8encode) {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = (packet.data === undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob && data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i+1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n  fr.onload = function() {\n    packet.data = fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function(packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (Blob && packet.data instanceof global.Blob) {\n    var fr = new FileReader();\n    fr.onload = function() {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += global.btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  // String data\n  if (typeof data == 'string' || data === undefined) {\n    if (data.charAt(0) == 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      try {\n        data = utf8.decode(data);\n      } catch (e) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!global.ArrayBuffer) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary == 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data != 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n  if (data == '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = ''\n    , n, msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (':' != chr) {\n      length += chr;\n    } else {\n      if ('' == length || (length != (n = Number(length)))) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      msg = data.substr(i + 1, n);\n\n      if (length != msg.length) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      if (msg.length) {\n        packet = exports.decodePacket(msg, binaryType, true);\n\n        if (err.type == packet.type && err.data == packet.data) {\n          // parser error in individual packet - ignoring payload\n          return callback(err, 0, 1);\n        }\n\n        var ret = callback(packet, i + n, l);\n        if (false === ret) return;\n      }\n\n      // advance cursor\n      i += n;\n      length = '';\n    }\n  }\n\n  if (length != '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p === 'string'){\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n\n    var resultArray = new Uint8Array(totalLength);\n\n    var bufferIndex = 0;\n    encodedPackets.forEach(function(p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else { // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  var numberTooLong = false;\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1; ; i++) {\n      if (tailArray[i] == 255) break;\n\n      if (msgLength.length > 310) {\n        numberTooLong = true;\n        break;\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    if(numberTooLong) return callback(err, 0, 1);\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}