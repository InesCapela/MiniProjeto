{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nimport * as loadingErrorActions from '../actions/index';\nexport const authSuccess = (token, username) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    username: username\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const refreshToken = token => {\n  return {\n    token: token\n  };\n};\nexport const auth = (username, password) => {\n  return dispatch => {\n    const authData = {\n      username: username,\n      password: password\n    };\n    axios.post('http://0.0.0.0:8081/api/v1/auth/login', authData).then(res => {\n      dispatch(loadingErrorActions.startRequest());\n      const expirationDate = new Date(Date.parse(res.data.expirationTime));\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('username', res.data.username);\n      const expirationTime = Date.parse(res.data.expirationTime) - new Date().getTime();\n      dispatch(checkAuthTimeout(expirationTime));\n      dispatch(authSuccess(res.data.token));\n      dispatch(loadingErrorActions.endRequest());\n    }).catch(err => {\n      dispatch(loadingErrorActions.errorRequest(err.toString()));\n    });\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        const username = localStorage.getItem('username');\n        const auth = {\n          headers: {\n            Authorization: token,\n            username: username\n          }\n        };\n        axios.put('http://0.0.0.0:8081/api/v1/auth/refresh_token', auth).then(res => {\n          dispatch(refreshToken(res.data.data));\n        }).catch(err => {\n          dispatch(logout());\n        });\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout(expirationDate.getTime() - new Date().getTime()));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/nk/Desktop/Aulas/PAWB/MiniProjetoApresentacao/pawb-miniprojecto/src/store/actions/auth.js"],"names":["axios","actionTypes","loadingErrorActions","authSuccess","token","username","type","AUTH_SUCCESS","logout","localStorage","removeItem","AUTH_LOGOUT","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","refreshToken","auth","password","dispatch","authData","post","then","res","startRequest","expirationDate","Date","parse","data","expirationTime","setItem","getTime","checkAuthTimeout","endRequest","catch","err","errorRequest","toString","setTimeout","authCheckState","getItem","headers","Authorization","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nimport * as loadingErrorActions from '../actions/index';\n\nexport const authSuccess = (token, username) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token,\n        username: username,\n    };\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    localStorage.removeItem('expirationDate');\n    return {\n        type: actionTypes.AUTH_LOGOUT,\n    };\n}\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path,\n    };\n}\n\nexport const refreshToken = (token) => {\n    return {\n        token: token,\n    };\n}\n\nexport const auth = (username, password) => {\n    return dispatch => {\n        const authData = {\n            username: username,\n            password: password\n        };\n\n        axios.post('http://0.0.0.0:8081/api/v1/auth/login', authData).then(res => {\n            dispatch(loadingErrorActions.startRequest());\n\n            const expirationDate = new Date(Date.parse(res.data.expirationTime));\n\n            localStorage.setItem('token', res.data.token);\n            localStorage.setItem('expirationDate', expirationDate);\n            localStorage.setItem('username', res.data.username);\n\n            const expirationTime = Date.parse(res.data.expirationTime) - new Date().getTime();\n\n            dispatch(checkAuthTimeout(expirationTime));\n            dispatch(authSuccess(res.data.token));\n            dispatch(loadingErrorActions.endRequest());\n        }).catch(err => {\n            dispatch(loadingErrorActions.errorRequest(err.toString()));\n        });\n    }\n}\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime);\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()) {\n                const username = localStorage.getItem('username');\n                const auth = {\n                    headers: {\n                        Authorization: token,\n                        username: username,\n                    }\n                };\n                axios.put('http://0.0.0.0:8081/api/v1/auth/refresh_token', auth).then(res => {\n                    dispatch(refreshToken(res.data.data));\n                }).catch(err => {\n                    dispatch(logout());\n                });\n            } else {\n                dispatch(authSuccess(token));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())));\n            }\n        }\n    };\n}"]},"metadata":{},"sourceType":"module"}